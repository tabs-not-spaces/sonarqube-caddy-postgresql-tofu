services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: sonarqube-postgres
    environment:
      POSTGRES_DB: sonarqube
      POSTGRES_USER: sqladmin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - sonarqube-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sqladmin -d sonarqube"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SonarQube Application
  sonarqube:
    image: powershell.azurecr.io/sonarqube:community
    container_name: sonarqube-app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqube?sslmode=disable
      SONAR_JDBC_USERNAME: sqladmin
      SONAR_JDBC_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
      SONAR_WEB_HOST: 0.0.0.0
      SONAR_WEB_PORT: 9000
      # Elasticsearch configuration for local development
      SONAR_SEARCH_JAVAADDITIONALOPTS: -Dnode.store.allow_mmap=false
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
      - ../sonar.properties:/opt/sonarqube/conf/sonar.properties:ro
    ports:
      - "9000:9000"
    networks:
      - sonarqube-network
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      nproc:
        soft: 4096
        hard: 4096
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/api/system/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Caddy Reverse Proxy
  caddy:
    image: powershell.azurecr.io/caddy:latest
    container_name: sonarqube-caddy
    depends_on:
      sonarqube:
        condition: service_healthy
    environment:
      PUBLIC_DOMAIN: ${PUBLIC_DOMAIN:-sonarqube.local}
    ports:
      - "80:80"
      - "443:443"
    networks:
      - sonarqube-network
    restart: unless-stopped
    volumes:
      - ../Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config

volumes:
  postgres_data:
    driver: local
  sonarqube_conf:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_logs:
    driver: local
  sonarqube_extensions:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  sonarqube-network:
    driver: bridge